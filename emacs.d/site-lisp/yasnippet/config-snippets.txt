;;; -*- Mode: Emacs-Lisp -*-
;;; .emacs -
;;; Time-stamp <>

; ----------------------------------------------------------------------
; Accents
; ----------------------------------------------------------------------

; Ils sont normalement supportés par votre distribution mais on ne sait jamais
(setq selection-coding-system 'compound-text-with-extensions)
(set-terminal-coding-system 'latin-1)
(set-keyboard-coding-system 'latin-1)
(set-language-environment 'latin-1)

;; Accents...
(standard-display-european t)
(iso-accents-mode t)
(require 'iso-insert)
(set-language-environment 'latin-1)
(set-input-mode (car (current-input-mode)) (nth 1 (current-input-mode)) 0)

; Pour la console
(if (not (eq window-system 'x))
    (standard-display-european t))

;; donc on charge le desktop.elc ... et alors ...
;; et alors c'est ce qui est dit dans le desktop.el:
;; "save partial status of Emacs when killed"
;; Save the Desktop, i.e.,
;;      - some global variables
;;      - the list of buffers with associated files.  For each buffer also
;;              - the major mode
;;              - the default directory
;;              - the point
;;              - the mark & mark-active
;;              - buffer-read-only
;;              - some local variables
;; et les trois lignes qui suivent sont consideres comme necessaire a son
;; fonctionnement
;; ensuite si je lance emacs depuis un directory, j'affiche un fichier
;; et que je fais Echap-x desktop-save, emacs va garder tous les parametres,
;; et lorsque je relancerai emacs, je me retrouverai automatiquement avec le
;; fichier que j'avais edite auparavant et tout le bordel autour ....
;; etrange ... comme idee non ?
(load "desktop")
(desktop-load-default)
(desktop-read)

;; ;;----------------------
;; ;; bbdb
;; ;;----------------------

;; installer bbdb dans n'importe quel répertoire en ajoutant le nom de ce dernier au load-path
;;(add-to-list 'load-path "/usr/share/emacs/site-lisp/bbdb-1.51")

;; (require 'bbdb)
;; (bbdb-initialize)
;; (autoload 'bbdb/gnus-lines-and-from "bbdb-gnus")
;; (setq gnus-optional-headers 'bbdb/gnus-lines-and-from)
;; (autoload 'bbdb         "bbdb-com" "Insidious Big Brother Database" t)
;; (autoload 'bbdb-name    "bbdb-com" "Insidious Big Brother Database" t)
;; (autoload 'bbdb-company "bbdb-com" "Insidious Big Brother Database" t)
;; (autoload 'bbdb-net     "bbdb-com" "Insidious Big Brother Database" t)
;; (autoload 'bbdb-notes   "bbdb-com" "Insidious Big Brother Database" t)
;; (autoload 'bbdb-insinuate-vm       "bbdb-vm"    "Hook BBDB into VM")
;; (autoload 'bbdb-insinuate-rmail    "bbdb-rmail" "Hook BBDB into RMAIL")
;; (autoload 'bbdb-insinuate-mh       "bbdb-mhe"   "Hook BBDB into MH-E")
;; (autoload 'bbdb-insinuate-gnus     "bbdb-gnus"  "Hook BBDB into GNUS")
;; (autoload 'bbdb-insinuate-sendmail "bbdb"       "Hook BBDB into sendmail")
;; (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
;; (setq bbdb-send-mail-style 'message)

;; ;; La suite de la configurations nous vient de Nat, c'est une
;; ;; configuration parmis tant d'autres, mais un tres bon exemple.
;; ;; par defaut bbdb est configure pour accepter les numeros de
;; ;; telephone au format americain ici on desactive cette option
;; (setq bbdb-north-american-phone-numbers-p nil)
;; ;; permet d'eviter d'avoir une fenetre bbdb qui montre en permanence
;; ;; les mises a jour dans bbdb lorsque l'on utilise VM, MH, RMAIL ou
;; ;; GNUS
;; (setq bbdb-use-pop-up nil)
;; ;; pas de code de localisation par defaut pour les numeros de
;; ;; telephone
;; (setq bbdb-default-area-code nil)
;; ;; permet d'empecher a bbdb de creer une nouvelle entree a chaque fois
;; ;; qu'un mail d'une nouvelle personne est lu avec GNUS, RMAIL, VM ou
;; ;; MH.
;; (setq bbdb/mail-auto-create-p nil)
;; ;; nombre de lignes desire dans la fenetre popup de bbdb lorsque l'on
;; ;; utilise VM/MH/RMAIL ou GNUS.
;; (setq bbdb-pop-up-target-lines 7)

===========================================================================

;; Firefox-like zooming of fonts.
(setq default-font-zoom-index 2)
(setq font-zoom-index default-font-zoom-index)

(setq font-zoom-list
      (list "-*-fixed-*-*-*-*-6-*-*-*-*-*-*-*"
            "-*-fixed-*-*-*-*-10-*-*-*-*-*-*-*"
            "-*-fixed-*-*-*-*-13-*-*-*-*-*-*-*"
            "-*-fixed-*-*-*-*-17-*-*-*-*-*-*-*"
            "-*-fixed-*-*-*-*-18-*-*-*-*-*-*-*"
            "-*-fixed-*-*-*-*-24-*-*-*-*-*-*-*"
            "-*-fixed-*-*-*-*-36-*-*-*-*-*-*-*"
            "-*-fixed-*-*-*-*-48-*-*-*-*-*-*-*"))

(defun font-zoom-increase-font-size ()
  (interactive)
  (progn
    (setq font-zoom-index (min (- (length font-zoom-list) 1)
                               (+ font-zoom-index 1)))
    (set-frame-font (nth font-zoom-index font-zoom-list))))

(defun font-zoom-decrease-font-size ()
  (interactive)
  (progn
    (setq font-zoom-index (max 0
                               (- font-zoom-index 1)))
    (set-frame-font (nth font-zoom-index font-zoom-list))))

(defun font-zoom-reset-font-size ()
  (interactive)
  (progn
    (setq font-zoom-index default-font-zoom-index)
    (set-frame-font (nth font-zoom-index font-zoom-list))))

(define-key global-map (read-kbd-macro "C--") 'font-zoom-decrease-font-size)
(define-key global-map (read-kbd-macro "C-=") 'font-zoom-increase-font-size)
(define-key global-map (read-kbd-macro "C-0") 'font-zoom-reset-font-size)

(set-frame-font (nth font-zoom-index font-zoom-list))

=========================================================================

;; -*-Emacs-Lisp-*-

;; Ce fichier est concu pour etre reevalue, utiliser la variable first-time
;; pour eviter tout probleme.
(defvar first-time t
  "Valeur signifiant que c'est la premiere fois que .emacs a ete evalue"
  )

;; Keypad bindings
(global-set-key [up] "\C-p")
(global-set-key [down] "\C-n")
(global-set-key [left] "\C-b")
(global-set-key [right] "\C-f")
(global-set-key [home] "\C-a")
(global-set-key [end] "\C-e")
(global-set-key [prior] "\M-v")
(global-set-key [next] "\C-v")
(global-set-key [C-up] "\M-\C-b")
(global-set-key [C-down] "\M-\C-f")
(global-set-key [C-left] "\M-b")
(global-set-key [C-right] "\M-f")
(global-set-key [C-home] "\M-<")
(global-set-key [C-end] "\M->")
(global-set-key [C-prior] "\M-<")
(global-set-key [C-next] "\M->")

;; Divers
(global-set-key [C-tab] "\C-q\t")   ; Control tab quotes a tab.
(setq backup-by-copying-when-mismatch t)

;; Diff mode sympa
(autoload 'ediff-buffers "ediff" "Intelligent Emacs interface to diff" t)
(autoload 'ediff-files "ediff" "Intelligent Emacs interface to diff" t)
(autoload 'ediff-files-remote "ediff"
  "Intelligent Emacs interface to diff")

;; Mode de verrouillage automatique de la police de caracteres
(defvar font-lock-auto-mode-list
  (list 'c-mode 'c++-mode 'c++-c-mode 'emacs-lisp-mode 'lisp-mode 'perl-mode 'scheme-mode)
  "List of modes to always start in font-lock-mode")

(defvar font-lock-mode-keyword-alist
  '((c++-c-mode . c-font-lock-keywords)
    (perl-mode . perl-font-lock-keywords))
  "Associations between modes and keywords")

(defun font-lock-auto-mode-select ()
  "Automatically select font-lock-mode if the current major mode is
in font-lock-auto-mode-list"
  (if (memq major-mode font-lock-auto-mode-list)
      (progn
    (font-lock-mode t))
    )
  )

(global-set-key [M-f1] 'font-lock-fontify-buffer)

;; New dabbrev stuff
;(require 'new-dabbrev)
(setq dabbrev-always-check-other-buffers t)
(setq dabbrev-abbrev-char-regexp "\\sw\\|\\s_")
(add-hook 'emacs-lisp-mode-hook
      '(lambda ()
         (set (make-local-variable 'dabbrev-case-fold-search) nil)
         (set (make-local-variable 'dabbrev-case-replace) nil)))
(add-hook 'c-mode-hook
      '(lambda ()
         (set (make-local-variable 'dabbrev-case-fold-search) nil)
         (set (make-local-variable 'dabbrev-case-replace) nil)))
(add-hook 'text-mode-hook
      '(lambda ()
         (set (make-local-variable 'dabbrev-case-fold-search) t)
         (set (make-local-variable 'dabbrev-case-replace) t)))



;; Le complement a next-error
(defun previous-error (n)
  "Visit previous compilation error message and corresponding source code."
  (interactive "p")
  (next-error (- n)))

;; Divers...
(setq mark-even-if-inactive t)
(setq next-line-add-newlines nil)
(setq compile-command "make")
(setq suggest-key-bindings nil)
(put 'eval-expression 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'set-goal-column 'disabled nil)

;; Recherche des archives Elisp
(autoload 'format-lisp-code-directory "lispdir" nil t)
(autoload 'lisp-dir-apropos "lispdir" nil t)
(autoload 'lisp-dir-retrieve "lispdir" nil t)
(autoload 'lisp-dir-verify "lispdir" nil t)

;; Mode de verrouillage de police
(defun my-make-face (face colour &optional bold)
  "Create a face from a colour and optionally make it bold"
  (make-face face)
  (copy-face 'default face)
  (set-face-foreground face colour)
  (if bold (make-face-bold face))
  )

(if (eq window-system 'x)
    (progn
      (my-make-face 'blue "blue")
      (my-make-face 'red "red")
      (my-make-face 'green "dark green")
      (setq font-lock-comment-face 'blue)
      (setq font-lock-string-face 'bold)
      (setq font-lock-type-face 'bold)
      (setq font-lock-keyword-face 'bold)
      (setq font-lock-function-name-face 'red)
      (setq font-lock-doc-string-face 'green)
      (add-hook 'find-file-hooks 'font-lock-auto-mode-select)

      (setq baud-rate 1000000)
      (global-set-key "\C-cmm" 'menu-bar-mode)
      (global-set-key "\C-cms" 'scroll-bar-mode)
      (global-set-key [backspace] 'backward-delete-char)
                    ;      (global-set-key [delete] 'delete-char)
      (standard-display-european t)
      (load-library "iso-transl")))

;; X11 ou PC utilisant les ecritures directes a l'ecran
(if window-system
    (progn
      ;;      (global-set-key [M-f1] 'hilit-repaint-command)
      ;;      (global-set-key [M-f2] [?\C-u M-f1])
      (setq hilit-mode-enable-list
        '(not text-mode c-mode c++-mode emacs-lisp-mode lisp-mode
          scheme-mode)
        hilit-auto-highlight nil
        hilit-auto-rehighlight 'visible
        hilit-inhibit-hooks nil
        hilit-inhibit-rebinding t)
      (require 'hilit19)
      (require 'paren))
  (setq baud-rate 2400)         ; For slow serial connections
  )

;; Terminal de type TTY
(if (and (not window-system)
     (not (equal system-type 'ms-dos)))
    (progn
      (if first-time
      (progn
        (keyboard-translate ?\C-h ?\C-?)
        (keyboard-translate ?\C-? ?\C-h)))))

;; Sous Unix
(if (not (equal system-type 'ms-dos))
    (progn
      (if first-time
      (server-start))))

;; Add any face changes here
(add-hook 'term-setup-hook 'my-term-setup-hook)
(defun my-term-setup-hook ()
  (if (eq window-system 'pc)
      (progn
;;  (set-face-background 'default "red")
    )))

;; Restaure le  "desktop" - faire cela le plus tard possible
(if first-time
    (progn
      (desktop-load-default)
      (desktop-read)))

;; Indique que ce fichier a ete lu au moins une fois
(setq first-time nil)

;; Pas besoin de deverminer quoique ce soit maintenant

(setq debug-on-error nil)

;; Tout est fait
(message "All done, %s%s" (user-login-name) ".")

;;----------------------------------------------------------------------
;; Cl@ude
;;----------------------------------------------------------------------


;; Compilation options
(setq-default
 compilation-read-command t
 compilation-ask-about-save nil
 compilation-window-height 6
 )


(global-set-key (kbd "C-S-b") '(lambda () (interactive)
                                 (iswitchb-buffer-other-window)
                                 (other-window -1)))
(global-set-key (kbd "<C-escape>") 'list-buffers)
(global-set-key (kbd "C-S-l") 'recenter)
(global-set-key (kbd "C-q") 'save-buffers-kill-emacs)
(global-set-key (kbd "C-r") 'query-replace)
(global-set-key (kbd "C-s") 'save-buffer)
(global-set-key (kbd "C-S-s") 'save-some-buffers)
(global-set-key (kbd "M-s") 'write-file)
(global-set-key (kbd "C-w") 'kill-buffer)

(global-set-key (kbd "C-M-e") 'insert-euro-symbol)

(global-set-key (kbd "C-?") 'help-command)
(global-set-key (kbd "C-%") 'transpose-chars)

(global-set-key (kbd "C-§") 'my-eol-to-space)

(global-set-key (kbd "<C-tab>") 'other-window)
(global-set-key (kbd "<C-S-tab>") '(lambda () (interactive) (other-window -1)))
(global-set-key (kbd "<C-S-iso-lefttab>") '(lambda () (interactive) (other-window -1)))

(global-set-key (kbd "<f5>") 'revert-buffer)
(global-set-key (kbd "<f7>") 'flyspell-buffer)
(global-set-key (kbd "<C-f7>") 'flyspell-mode)
(global-set-key (kbd "<M-f9>") 'compile)
(global-set-key (kbd "<C-f9>") 'recompile)
(global-set-key (kbd "<f9>") 'next-error)
(global-set-key (kbd "<S-f9>") 'previous-error)

(global-set-key (kbd "<f10>") 'my-toggle-menu-and-scrollbar)

(global-set-key (kbd "<f11>") 'pop-tag-mark)
(global-set-key (kbd "<f12>") 'my-goto-tag)
(global-set-key (kbd "<S-f12>") 'my-goto-tag-other-window)
(global-set-key (kbd "<M-f12>") 'find-tag)

(global-set-key (kbd "<S-tab>") 'comint-dynamic-complete-filename)
(global-set-key (kbd "<S-iso-lefttab>") 'comint-dynamic-complete-filename)
(global-set-key (kbd "<backtab>") 'comint-dynamic-complete-filename)

(global-set-key (kbd "C-_") 'split-window-vertically)
(global-set-key (kbd "C-|") 'split-window-horizontally)

(global-set-key (kbd "M-SPC") 'dabbrev-expand)

(global-set-key (kbd "M-e") 'ediff-buffers)


(add-hook 'server-visit-hook
          '(lambda ()
             (local-set-key (kbd "C-w") 'server-edit)
             ))

;; HTML
(add-hook 'php-mode-user-hook
          '(lambda ()
             (local-set-key (kbd "M-m") 'html-mode)
             ))
(add-hook 'html-mode-hook
          '(lambda ()
             (local-set-key (kbd "M-m") 'php-mode)
             (local-set-key (kbd "M-s") 'write-file)
             (local-set-key (kbd "M-TAB") 'sgml-tags-invisible)
             (local-set-key (kbd "C-S-v") 'my-browse-buffer)
             (local-set-key (kbd "S-SPC") "&nbsp;")
             (local-set-key (kbd "C-<") "&laquo;&nbsp;")
             (local-set-key (kbd "C->") "&nbsp;&raquo;")
             (local-set-key (kbd "C-(") 'sgml-tag)
             (local-set-key (kbd "C-)") 'sgml-close-tag)
             (local-set-key (kbd "<C-return>") 'my-html-line)
             (local-set-key (kbd "<C-S-return>") 'my-html-paragraph)
             (local-set-key (kbd "C-1") 'html-headline-1)
             (local-set-key (kbd "C-2") 'html-headline-2)
             (local-set-key (kbd "C-3") 'html-headline-3)
             (local-set-key (kbd "C-4") 'html-headline-4)
             (local-set-key (kbd "C-5") 'html-headline-5)
             (local-set-key (kbd "C-6") 'html-headline-6)
             (local-set-key (kbd "C-é") 'sgml-name-8bit-mode)
             (local-set-key (kbd "<C-delete>") 'my-kill-word-or-tag)
             (local-set-key (kbd "<M-left>") 'sgml-skip-tag-backward)
             (local-set-key (kbd "<M-right>") 'sgml-skip-tag-forward)
             (local-set-key (kbd "C-&") 'sgml-name-char)
             (local-set-key (kbd "C-? SPC") 'sgml-tag-help)
             (local-set-key [tab] 'indent-for-tab-command)
             (local-set-key (kbd "C-i") 'html-image)
             (local-set-key (kbd "C-n") 'html-name-anchor)
             (local-set-key (kbd "C-h") 'html-href-anchor)
             (local-set-key (kbd "C-#") 'html-ordered-list)
             (local-set-key (kbd "C-*") 'html-unordered-list)
             ))


;----------------------------------------------------------------------
; Sébastien Dinot
;----------------------------------------------------------------------

;; Fichier ~/.emacs (fichier de configuration d'Emacs)
;; Copyright (C) 2002-2009 Sébastien Dinot <sebastien.dinot@free.fr>
;; Dernière modification : 2009-08-27 23:14

;; ===========================================================================
;; Chargement et activation des modes que j'utilise couramment
;; ===========================================================================

;; Lorsqu'on ouvre deux fichiers de même nom « fic », Emacs nomme les tampons
;; « fic » et « fic<2> », ce qui ne facilite pas leur identification. Le mode
;; uniquify permet de les distinguer via leur répertoire respectif.
(require 'uniquify)

;; Activer la mise en exergue des espaces superflus ou hétérogènes
(require 'whitespace)

;; Chargement du module d'impression Postscript
(require 'ps-print)

;; Sauvegarde d'une session à l'autre de l'historique des commandes et des
;; fichiers ouverts
(savehist-mode 1)

;; Choix de la police de caractères en environnement graphique
(if (eq window-system 'x)
  (progn
    ;; Je préfère voir apparaître le curseur sous la forme d'une barre
    ;; verticale clignotante.
    (bar-cursor-mode 1)
    (blink-cursor-mode 1)
  )
)

;; ===========================================================================
;; Initialisation de variables internes aux valeurs non standard
;; ===========================================================================

;; Configuration du mode Uniquify : on affiche la chaîne distinctive après le
;; nom en utilisant l'extrait minimal du chemin nécessaire à l'identification
;; du fichier (on ignore les tampons spéciaux et on supprime ce nommage
;; spécifique lorsque l'ambiguïté n'existe plus).
(setq uniquify-buffer-name-style 'post-forward)
(setq uniquify-after-kill-buffer-p 1)
(setq uniquify-ignore-buffers-re "^\\*")

;; Inhiber l'affichage de l'écran d'accueil au lancement d'Emacs.
(setq inhibit-startup-screen 1)

;; Certains caractères ne sont associés à aucune combinaison de touches du
;; clavier. On peut cependant les désigner par leur code ASCII via la séquence
;; « C-q <code ascii> RET ». Par défaut, Emacs attend un code ASCII en octal
;; mais je connais mieux les valeurs décimales. Autant qu'Emacs s'adapte...
(setq read-quoted-char-radix 10)

;; Lors de l'enregistrement du tampon :
;; 1. demander s'il faut ajouter un saut de ligne final lorsqu'il est absent,
;; 2. effacer les espaces superflus en fin de ligne,
;; 3. actualiser l'horodate interne,
;; 4. actualiser l'année dans la mention de copyright.
;; NB : La recherche du motif à actualiser avec l'horodate courante
;;      ("Time-stamp: <%%>" par défaut) s'effectue dans les 10 premières
;;      lignes (8 par défaut)
(setq
  time-stamp-active 1
  time-stamp-line-limit 10
  time-stamp-pattern "\\([Ll]ast modified\\|[Dd]erni[eè]re modification\\) *: %04y-%02m-%02d %02H:%02M$"
  time-stamp-format "%04y-%02m-%02d %02H:%02M")
(setq require-final-newline 'query)
(add-hook 'write-file-functions 'delete-trailing-whitespace)
(add-hook 'write-file-functions 'time-stamp)
(add-hook 'write-file-functions 'copyright-update)

;; Lors de la mise en exergue d'une correspondance de parenthèses, surligner
;; seulement les parenthèses (remplacer « parenthesis » par « expression »
;; pour que toute l'expression soit surlignée).
(setq show-paren-style 'parenthesis)

;; Pas de message initial dans le tampon *scratch*
(setq initial-scratch-message "")

;; Supprimer les fichiers de sauvegarde en quittant (vous savez, ces fameux
;; fichiers dont le nom se termine par « ~ »)
(setq make-backup-files nil)

;; Configuration des paramètres d'impression Postscript
(setq ps-paper-type 'a4
      ps-font-family 'Courier
      ps-print-size 10
      ps-print-header t
      ps-landscape-mode nil)
(setq-default ps-header-lines 1)
(setq ps-print-color-p 'black-white)

;; Lorsque le curseur atteint la fin de la fenêtre, le contenu se déplace
;; d'une seule ligne et non d'une demi-fenêtre.
(setq scroll-step 1)

;; Variable utilisée par la fonction de mise en exergue des mots-clés (définie
;; ci-dessous) pour pointer les propriétés d'affichage (définies ci-dessus)
;; à leur appliquer.
(defvar special-words 'special-words)

;; On associe à l'ouverture d'un fichier une fonction (anonyme) qui recherche
;; et met en exergue une liste prédéfinie de mots-clés. Ces mots-clés ne sont
;; signalés que lorsqu'ils sont suivis d'un caractère « : », éventuellement
;; séparé du mot-clé par un ou plusieurs espaces.
(add-hook 'find-file-hooks
  (lambda ()
    (font-lock-add-keywords nil
      '(("\\<\\(FIXME\\|TODO\\|WARNING\\|BUG\\|XXX+\\|NB\\|NOTE\\|ATTENTION\\)[  ]*:"
         1 special-words t))
    )
  )
)
