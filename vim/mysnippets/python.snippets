snippet utf8 "utf8 encoding" b
	# -*- coding: utf-8 -*-
endsnippet

snippet imp "import" b
	import ${1:module}
endsnippet

# Module Docstring
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
endsnippet

snippet fore
	for ${1:n}, ${2:item} in enumerate(${3:items}):
		${4:pass}
endsnippet

snippet class
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
endsnippet

snippet def
	def ${1:function}(${2}):
		${3:pass}
endsnippet

snippet defs
	def ${1:method}(self${2}):
		${3:pass}
endsnippet

snippet lam
	lambda ${1:args}: ${2:action}
endsnippet

snippet .
	self.
endsnippet

# __magic__
snippet _
	__${1:init}__${2}
endsnippet

snippet ***
	*args, **kwargs
endsnippet

snippet af
	assert False, repr(${1})$2
endsnippet

snippet rpdb
	import rpdb2; rpdb2.start_embedded_debugger("asdf")
endsnippet

snippet pp
	from pprint import pprint
	pprint($1)
endsnippet

snippet pprint
	from pprint import pprint
	pprint($1)
endsnippet

snippet trace
	import traceback, sys; traceback.print_exception(*sys.exc_info())
endsnippet

snippet stack
	import traceback; traceback.print_stack()
endsnippet

snippet mem
	import resource
	def print_memory():
		usage=resource.getrusage(resource.RUSAGE_SELF)
		return "usertime=%s systime=%s mem=%s mb" % (
			usage[0], usage[1], usage[2] * resource.getpagesize() / 1e6)
endsnippet

# vim:ft=snippets:
