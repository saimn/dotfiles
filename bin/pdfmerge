#! /bin/sh

############################################################################################
# File   : pdfmerge 
# Author : Sebastien Varrette <Sebastien.Varrette@imag.fr>
#          (Web page : http://www-id.imag.fr/~svarrett/perso.html)
# Creation date : 14 Sep 2005
#
# Description : merges  PDF  documents  into a single document
#  
############################################################################################
# Version du script et commande utilisée pour l'invoquer
version=0.2
command=`basename $0`

# fichier de sortie par défaut
output="output.pdf"
# mode ps : par defaut, ce n'est pas le cas
extension="pdf"
REQUIRED_BIN="gs ps2pdf ls"

################################################################################
############## --- Fonctions d'affichage diverses et variées --- ###############
################################################################################
####
# Affichage de la version du script 
##
print_version() {
    echo "This is $command version $version;"
    echo "Type '$command -h' to obtain more informations"
}
####
# Affichage de l'aide
##
print_help() {
    echo -e \
	"NAME\n"                                                                 \
        "      $command\n"                                                       \
        "\nSYNOPSIS\n"                                                           \
        "      $command [-h|-v]\n"                                               \
	"      $command [-o output.pdf] file1.pdf file2.pdf ...\n"               \
	"      $command [-ps] -d DIRECTORY\n"                                    \
	"      $command -ps [-o output.pdf] file1.ps file2.ps ...\n"                              \
        "\nDESCRIPTION\n"                                                        \
	"      $command merges  PDF  documents  into a single document\n"\
	"      \n"\
        "\nAVAILABLE OPTIONS\n"                                                  \
	"      -h : print help and exit\n"                                       \
        "      -v : print version and exit\n"                                    \
	"      -o  output.pdf : output document\n"                               \
	"      -d DIRECTORY : merge all pdf files (resp. ps files if option '-ps'\n"\
	"                     is specified) that are in DIRECTORY.\n"            \
	"                     The files are sorted by the ls command\n"          \
        "      -ps : merge ps files into a single pdf document\n"                \
        "\nAUTHOR\n"                                                             \
        "      Sebastien Varrette <Sebastien.Varrette@imag.fr> \n"               \
	"      Web page :  http://www-id.imag.fr/~svarrett/\n"                   \
        "\nREPORTING BUGS\n"                                                     \
        "      Please report bugs to <Sebastien.Varrette@imag.fr>\n"             \
        "\nCOPYRIGHT\n"                                                          \
        "      This  is a free software. There is NO warranty; not even for\n"   \
	"      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n"           \
        "\nSEE ALSO\n"                                                           \
	"      Other scripts are also available on my web site\n"                \
	"                http://www-id.imag.fr/~svarrett/"
}

####
# Affichage d'un message d'erreur de format et exit
# Optionnal parameter $1 : error message ('bad format' by defaut) 
##
print_error_and_exit() {
    if [ -z "$1" ]; then message="Bad format"
    else message="$1"
    fi
    echo -e "$message \nType '$command -h' for help"
    exit 1
}

################################################################################
###########################  --- Fonctions Toolbox --- #########################
################################################################################
####
# yes/no question. exit 1 if no answer
##
yesno() {
    echo -e "$1\nAre you sure you want to continue? (yes/no)"
    read ans
    case $ans in 
	n*|N*)exit 1;;
    esac
}

#####
# Check availability of binaries passed as arguments on the current system
##
check_bin() {
    if [ $# -eq 0 ]; then 
	print_error_and_exit "no binary to check"
    fi
    for appl in `echo $*`; do
	echo "Checking the following command on your system : $appl"
	tmp=`which $appl`
	if [ -z "$tmp" ]; then
	    echo " --> I can't find this command which is required."
	    print_error_and_exit "     May be you should ensure it is installed and/or update \$PATH !"
	fi
    done
}

#####
# Check if the directories $* exists. If not, ask to create it. exit  
##
check_noempty_dir() {
    if [ $# -eq 0 ]; then 
	print_error_and_exit "no directory to check"
    fi    
    for dir in `echo $*`; do
	echo "Checking the directory : $dir"
	if [ ! -d $dir ]; then
	    echo " --> This directory doesn't exist. Shall I create it? (yes/no)"
	    read ans
	    case $ans in 
		yes|y*|Y*) mkdir -p $dir;;
		*) print_error_and_exit "Now exiting...";;
	    esac
	fi
    done
}

################################################################################
########################  --- Fonctions Spécifiques --- ########################
################################################################################

########################################
# Teste si la liste de fichier $list
# contient bien des fichiers d'extension $1 
# Arguments : 
#       - extension (ps ou pdf)
#       - la liste de fichiers
########################################
test_extension() {
    extension=$1
    shift
    # TODO : ameliorer le test
    if [ -z `echo $1 | grep .$extension` ]; then
	print_error_and_exit "*** incorrect list of files : $*"
    fi
}

#####################################################
# Fonction de concatenation des fichiers pdf
# Arguments : $1 : la liste des fichiers a concatener
# Precondition : $1 est non vide
#####################################################
do_mergepdf() {
    # on commence a vérifier si on a bien des fichier pdf
    test_extension pdf $*    
    echo "*** Start of merge *** " 
    gs  -q -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile=$output -f $*
}

################################################################################
# Fonction de concatenation des fichiers ps en 1 fichier pdf 
# Arguments : $1 : la liste des fichiers a concatener
# Precondition : $1 est non vide
################################################################################
do_mergeps() {
    # on commence a vérifier si on a bien des fichier ps
    test_extension ps $*    
    pdffiles=`echo $* | sed 's/.ps/.pdf/g'`
    while [ $# -ge 1 ]; do
        # un peu redondant avec gs que d'utiliser ps2pdf mais bon... 
        # l'essentiel est ds lactel :-) (et tant que ca marche...)
        # TODO : trouver les option de gs qui permettent de factoriser ça...
	echo "*** Convert $1 by ps2pdf" 
	ps2pdf $1
	shift
    done
    do_mergepdf $pdffiles 
}

############################
# Fonction de concatenation
############################
do_merge() {
    # Check availability of 'gs' and 'ps2pdf' commands
    check_bin $REQUIRED_BIN

    # y a sans doute moyen avec eval de se ramener a 1 ligne mais j pas temps de chercher
    # genre do_merge$extension
    if test $extension="pdf" -o  $extension="ps"; then
	eval do_merge$extension $*
    fi
    exit 0
}


################################################################################
############################ --- Debut du script --- ###########################
################################################################################
# First check format
if [ $# -eq 0 ]; then 
    print_error_and_exit
fi
# now parse command line arguments
while [ $# -ge 1 ]; do
    case $1 in
	-h*) print_help $1; exit 0;;
	-v*) print_version; exit 0;;
	-o)  shift; output=`echo $1`;;
	-ps) extension="ps";;
	-d)  shift
	     #on teste le répertoire; s'agit-il d'une option?
	    chemin=`echo $1 | grep -e '^/'`
	    if [ -z $chemin ]; then
		    chemin="./$1"
	    fi
	    cd $chemin
	    liste_of_files=`ls *.$extension | xargs echo`
	    echo "--- Liste of files : $liste_of_files"
	    do_merge $liste_of_files;;
	*)  do_merge $*;;
    esac    
    shift
done

# Now do your job!
